# Generated by Django 5.2 on 2025-04-10 09:24

import book_api.models
import django.db.models.functions.text
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('author_api', '0002_alter_author_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, max_length=255, null=True, unique=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('added_date_time', models.DateTimeField(auto_now_add=True)),
                ('updated_date_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='Unique Genre name is not case sensitive.')],
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_code', models.CharField(default=book_api.models.generate_book_code, editable=False, max_length=255, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('published_year', models.PositiveIntegerField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('added_date_time', models.DateTimeField(auto_now_add=True)),
                ('updated_date_time', models.DateTimeField(auto_now=True)),
                ('authors', models.ManyToManyField(blank=True, related_name='books', to='author_api.author')),
                ('genres', models.ManyToManyField(blank=True, related_name='books', to='book_api.genre')),
            ],
        ),
    ]
